{"version":3,"sources":["Components/Button/Button.jsx","Components/ContactForm/ContactForm.jsx","Components/Input/Input.jsx","Components/Filter/Filter.jsx","Components/ContactList/ContactList.jsx","Components/ContactsListItem/ContactsListItem.jsx","App.js","index.js"],"names":["Button","btnType","btnName","onClick","classButton","type","className","defaultProps","ContactForm","state","name","number","nameInputId","nanoid","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","id","reset","this","htmlFor","pattern","title","required","onChange","ButtonEl","map","Component","Input","classInput","classLabel","generateID","Filter","ContactsList","children","ContactsListItem","onDelete","contacts","App","filter","formSubmitHandler","data","some","contact","alert","prevState","filterHandler","deleteHandler","contactId","locStorContacts","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","normalizedFilter","toLocaleLowerCase","filteredContactList","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a37d58c.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Button = ({ btnType, btnName, onClick , classButton}) => {\r\n    return (<>\r\n            <button type={btnType} onClick={onClick} className={classButton}>{btnName}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    btnType: \"button\",\r\n}\r\n\r\nButton.propTypes = {\r\n  btnType: PropTypes.string.isRequired,\r\n  btnName: PropTypes.string.isRequired,\r\n  price: PropTypes.func,\r\n  classButton: PropTypes.string,\r\n};\r\n\r\nexport default Button","import React, { Component } from \"react\";\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Button from '../Button';\r\n\r\nimport ButtonEl from './ButtonEl.json';\r\n\r\n\r\nimport './ContactForm.scss'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n    \r\n    nameInputId = nanoid();\r\n    numberInputId = nanoid();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({ id: nanoid(), ...this.state });\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '', });\r\n    };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n        \r\n        return (\r\n            <form className=\"form-container\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor={this.nameInputId} className=\"form-label\">Name</label>\r\n                <input\r\n                className=\"form-input\"\r\n                type=\"text\"\r\n                value={name}\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={this.handleChange}\r\n                id={this.nameInputId}\r\n                />\r\n                <label htmlFor={this.numberInputId} className=\"form-label\">Number</label>\r\n                <input\r\n                className=\"form-input\"\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                required\r\n                onChange={this.handleChange}\r\n                id={this.numberInputId}\r\n                />\r\n                {ButtonEl.map(({ btnType, btnName }) =>\r\n                {\r\n                    return (<Button\r\n                        btnType={btnType}\r\n                        btnName={btnName}\r\n                        key={btnName}\r\n                        classButton=\"form-button\"\r\n                    />)\r\n                })}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactForm","import Proptypes from 'prop-types'\r\n\r\nconst Input = ({ type, value, name, pattern, title, id, onChange, classInput, classLabel }) => {\r\n  return (<>\r\n        <label htmlFor={id} className={classLabel}>{name}</label>\r\n        <input\r\n          className={classInput}\r\n          type={type}\r\n          value={value}\r\n          name={name}\r\n          pattern={pattern}\r\n          title={title}\r\n          id={id}\r\n          onChange={onChange}\r\n          required/>  \r\n        </>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n  type: Proptypes.string.isRequired,\r\n  value: Proptypes.string.isRequired,\r\n  name: Proptypes.string,\r\n  pattern: Proptypes.string,\r\n  title: Proptypes.string,\r\n  id: Proptypes.string.isRequired,\r\n  onChange: Proptypes.func.isRequired,\r\n  classInput: Proptypes.string,\r\n  classLabel: Proptypes.string,\r\n}\r\n\r\nexport default Input","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Input from '../Input';\r\n\r\nimport './Filter.scss'\r\n\r\nconst generateID = nanoid();\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <Input\r\n    value={value}\r\n    onChange={onChange}\r\n    type=\"text\"\r\n    id={generateID}\r\n    name=\"Find contacts by name\"\r\n    classLabel=\"filter-label\"\r\n    classInput=\"filter-input\"\r\n  />\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport './ContactList.scss'\r\n\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"contacts-list\">{ children }</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;","import PropTypes from 'prop-types';\r\n\r\nimport Button from \"../Button\";\r\n\r\nimport './ContactsListItem.scss'\r\n\r\nconst ContactsListItem = ({ onDelete, contacts }) => (\r\n  <>\r\n    {contacts.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id} className=\"contact-item\">\r\n          {name}: {number}\r\n          <Button\r\n            btnType=\"button\"\r\n            btnName=\"Delete\"\r\n            onClick={() => onDelete(id)}\r\n            classButton=\"contact-button\"\r\n          />\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactsListItem","import React, { Component } from \"react\";\n\nimport ContactForm from \"./Components/ContactForm\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\nimport ContactsListItem from \"./Components/ContactsListItem\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    // contacts: [\n    //   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    //   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    //   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    //   { id: \"id-4\", nnme: \"Annie Copeland\", number: \"227-91-26\" },\n    // ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const locStorContacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(locStorContacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  formSubmitHandler = (data) => {\n    const isInContacts = (contact) => {\n      return contact.name === data.name;\n    };\n    if (this.state.contacts.some(isInContacts)) {\n      alert(`${data.name} is already in contacts`);\n    } else\n      this.setState((prevState) => ({\n        contacts: [...prevState.contacts, data],\n      }));\n  };\n\n  filterHandler = (event) => {\n    const { value } = event.currentTarget;\n    this.setState({ filter: value });\n  };\n\n  deleteHandler = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContactList = contacts.filter((contact) =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n    return (\n      <div className=\"container\">\n        <h2 className=\"title\">Phonebook</h2>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n\n        <h2 className=\"secondary-title\">Contacts</h2>\n        {contacts.length > 0 ? (\n          <>\n            <Filter onChange={this.filterHandler} value={filter} />\n            <ContactList>\n              <ContactsListItem\n                contacts={filteredContactList}\n                onDelete={this.deleteHandler}\n              />\n            </ContactList>\n          </>\n        ) : (\n          <span className=\"contact-message\">You have no contacts yet </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}